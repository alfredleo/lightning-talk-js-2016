section
    h1 JavaScript in 2016
    h3 Current status of JS development

section
    section
        h2 Javascript
        img(src="/src/images/jsgolf.jpg")
        p This is Javascript. If you put big wheels and a racing stripe on a golf cart, it's still a fucking golf cart.
        br
        small
            a(href="http://crashworks.org/if_programming_languages_were_vehicles/" target="_blank") @source: if programming languages were vehicles

    section
        h2 WAT
        pre
            code.hljs.javascript.
                2 == [2];
                // true

                2 == [[2]];
                // true

                [] + [];
                // ""

                [] + {};
                // "[object Object]"

                {} + [];
                // 0

    section
        h2 WAT
        pre
            code.hljs.javascript.
                "string" instanceof String;
                // false

                String("abc") instanceof String;
                // false

                new String("abc") instanceof String;
                // true

                111111111111111111111 === 111111111111111110000;
                 // true
        small
            | Recommended: &nbsp;
            a(href="https://www.destroyallsoftware.com/talks/wat" target="_blank") A lightning talk by Gary Bernhardt [CodeMash, 2012]

section
    section#ecmascript
        style.
            #ecmascript table {
                margin: auto;
                width: 60%;
            }

            #ecmascript table tr td {
                text-align: center;
            }
        h2 ECMAScript
        table
            thead
                tr
                    td Version
                    td Date published
            tbody
                tr
                    td 1.0
                    td 1997
                tr
                    td 2.0
                    td 1998
                tr
                    td 3.0
                    td 1999
                tr
                    td 4.0
                    td abandoned
                tr
                    td 5.0
                    td 2009
                tr
                    td 5.1
                    td 2011
                tr
                    td 6.0
                    td 2015
                tr
                    td 7.0
                    td in progress

    section
        h2 ES6 - Classes
        pre
            code.hjls.javascript.
                class Polygon {
                  constructor(height, width) {
                    this.height = height;
                    this.width = width;
                  }
                }

                let p = new P(100, 200);

    section
        h2 ES6 - let, const, var
        pre
            code.hjls.javascript.
                function() {
                    if(true) {
                        var v = 1;
                        let l = 1;
                        const c = 1;
                    }
                    console.log(v, l, c);
                }

    section
        h2 ES6 - spread & destructuring
        pre
            code.hjls.javascript.
                let array = [1, 2, 3, 4, 5];

                let [one, two, ...rest] = array; // one = 1, two = 2, rest = [3, 4, 5]

                let array2 = [...array, 6, 7, 8] // [1, 2, 3, 4, 5, 6, 7, 8]

        pre
            code.hjls.javascript.
                let {a, b} = {a:1, b:2} // a = 1, b = 2

                let {a, b, ...rest} = {a:1, b:2, c:3, d:4}  // ES7

                let [a, b] = [b, a]; // swap

    section
        h2 ES6 - spread & destructuring
        pre
            code.hjls.javascript.
                let obj = {a:1, b:2};

                let d = 4;

                let obj2 = {
                    ...obj,
                    c:3,
                    d
                }
                // obj2 = {"a":1, "b":2, "c":3, "d":4}

    section
        h2 ES6 - destructuring
        pre
            code.hjls.javascript.
                function f({a, b}) {
                    return a + b;
                }

                f({a: 1, b: 2})
        pre
            code.hjls.javascript.
                function plot({size = 10, cords = { x: 0, y: 0} } = {}) {
                    ...
                }

                plot({ cords: { x: 18, y: 30 } });

    section
        h2 ES6 - modules
        pre
            code.hjls.javascript.
                export const PI = Math.PI;
                export function sin(x) {}
                export function cos(x) {}
                export function random(x) {}

                export default {
                    PI,
                    sin,
                    cos,
                    random
                }

        pre
            code.hjls.javascript.
                import { PI } from 'my/module';
                import { sin, cos } from 'my/module';
                import { random as mathRandom } from 'my/module';

                import Math from 'my/module';

    section
        h2 ES6 - string templates
        pre
            code.hjls.javascript.
                let x = 2, y = 3;

                let text = `value of x = ${x + y}`

        pre
            code.hjls.javascript.
                `
                    multi
                    line
                `
    section
        h2 ES6 - tagged template literals
        pre
            code.hjls.javascript.
                function tag(strings, ...values) {
                  return function(obj) {
                        return strings[0] + obj[values[0]] + strings[1];
                  };
                }

                let hello = tag`Hello ${'name'}!`;

                hello({name: 'Alice'});     // "Hello Alice!"
                hello({name: 'Bob'});       // "Hello Bob!"

    section
        h2 ES6 - generators
        pre
            code.hjls.javascript.
                function* oneTwo(){
                    yield 1;
                    yield 2;
                }

                let gen = oneTwo();

                console.log(gen.next()); // {value: 1, done: false}
                console.log(gen.next()); // {value: 1, done: false}
                console.log(gen.next()); // {value: undefined, done: true}

    section
        h2 ES6 - rest arguments
        pre
            code.hjls.javascript.
                function argsLength(...theArgs) {
                    console.log(theArgs.length);
                }

                argsLength();           // 0
                argsLength(5);          // 1
                argsLength(5, 6, 7);    // 3

    section
        h2 ES6 - arrow functions
        pre
            code.hjls.javascript.
                function (a) {
                    return a * 2;
                }

                a => a * 2

                () => 4

                (a, b) => a * b

                (a, b) => {
                    return a * b;
                }

        pre
            code.hjls.javascript.
                return function() {
                    return this.text
                }.bind(this);

                return () => this.text

    section
        h2 ES6 - promises
        pre
            code.hjls.javascript.
                let promise = new Promise((resolve, reject) => {
                    let result = Math.random();
                    result < 0.5 ? resolve(result) : reject('too much');
                });

                promise
                    .then(result => console.log(result))
                    .catch(e => console.log(`error: ${e}`))

    section
        h2 ES6 - more...
        ul
            li Map, Set
            li WeakMap, WeakSet
            li Reflect
            li Symbol
            li Proxy

    section
        h2
            strong ES7
            | - more, more, more...

        p Exponentiation operator
        pre
            code.hjls.javascript.
                let cubed = x => x ** 3;

        p async/await
        pre
            code.hjls.javascript.
                async function asyncFunction() {
                  await functionReturningPromise();
                }
                asyncFunction().then(...)

        p decorators
        pre
            code.hjls.javascript.
                class Person {
                  @memoized
                  get name() { return 'Bob'; }
                }

        p class properties
        pre
            code.hjls.javascript.
                class Person {
                    name = 'Alice';
                    static says = 'I love JS!';
                }

section.
    - es6/es7/...
    - http://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-beyond-the-browser/?utm_source=javascriptweekly&utm_medium=email
    - https://github.com/copy/v86?utm_source=javascriptweekly&utm_medium=email
    - https://www.google.co.uk/search?q=always+bet+on+js
    - transpiler Source-to-source compiler
    - nw.js/electron
    - react native
    - johny five
    - cordova/phonegap
    - nodejs
    - npm
    - tessel
    - web workers
                    - transferable objects, 0 copy
                    - shared/dedicated
    - sockets
    - typescript/coffeescript/pyjs/luajs/jsweet...
    - Vaadin/GWT/DukeScript
    - asm.js
    - grunt/gulp/babel/webpack
    - concurently, ca$h
    - webassembly http://webassembly.github.io/demo/
    - http://mohayonao.github.io/timbre.js/?utm_source=javascriptweekly&utm_medium=email



section
    section
        h2 ~2004
        pre
            code.hljs.javascript.
                var request = new XMLHttpRequest();
                request.onload = function() {
                    console.log(this.responseText);
                };
                request.onerror = function(err) {
                    console.log(err);
                 };
                request.open('POST', './api', true);
                request.send(JSON.stringify({limit: 10}));

    section
        h2 ~2006
        pre
            code.hljs.javascript.
                $.ajax({
                  method: "POST",
                  url: "/api",
                  data: { limit: 10 }
                }).done(function( msg ) {
                    console.log(msg);
                  });

    section
        h2 2016
        pre
            code.hljs.javascript.
                fetch('/url')
                    .then(function (response) {
                            if (response.status !== 200) {
                                console.log(response.status);
                                return;
                            }
                            response.json().then(function (data) {
                                console.log(data);
                            });
                        }
                    )
                    .catch(function (err) {
                        console.log(err);
                    });
